Shader "Unlit/billboardYonlyBK"
{
	Properties
	{
		_MainTex("Texture", 2D) = "white" {}
		_AlphaTex("Alpha Texture", 2D) = "white" {}
		_TintColor("Tint Color", Color) = (0.5,0.5,0.5,0.5)
		_Scale("Scale", float) = 1.0
		_Rotation("Rotation ", Float) = 0.0
		_Xoffset("x offset ", Float) = 0.0
		_Yoffset("Y offset ", Float) = 0.0
	}
	Category
	{

		Tags
		{
			"Queue" = "Transparent"
			"IgnoreProjector" = "True"
			"RenderType" = "Transparent"
		}
		Blend SrcAlpha OneMinusSrcAlpha
		AlphaTest Greater .01
		//Cull Off

		// important, otherwise some objects may not be drawn behind the transparent parts
		ZWrite off
			SubShader
		{
			Pass
			{
				CGPROGRAM
				#pragma vertex vert
				#pragma fragment frag


				#include "UnityCG.cginc"

				struct appdata
				{
					float4 vertex : POSITION;
					float2 uv : TEXCOORD0;
				};

				struct v2f
				{
					float2 uv : TEXCOORD0;

					float4 vertex : SV_POSITION;
				};

				sampler2D _MainTex;
				float4 _MainTex_ST;
				sampler2D _AlphaTex;
				fixed4 _TintColor;
				float _Scale;
				float _Xoffset;
				float _Yoffset;
				float _Rotation;

				void Billboard(inout appdata v)
				{
					//const float3 local = float3(v.vertex.x, v.vertex.y, 0); // this is the quad verts as generated by MakeMesh.cs in the localPos list.
					const float3 offset = float3(0, 0, v.vertex.z);
					const float3 upVector = half3(0, 1, 0);
					const float3 forwardVector = UNITY_MATRIX_IT_MV[2].xyz; // camera forward
					const float3 rightVector = normalize(cross(forwardVector, upVector));
					float3 position = 0;
					position += v.vertex.x * rightVector;
					position += v.vertex.y * upVector;
					//position += local.z * forwardVector;
					v.vertex = float4(offset + position, 1);
					//v.normal = forwardVector;
				}

				v2f vert(appdata v)
				{
					float PiRot = _Rotation * 0.017453;
					float sinX = sin(-PiRot);
					float cosX = cos(-PiRot);
					float sinY = sin(-PiRot);
					float2x2 rotationMatrix = float2x2(cosX, -sinX, sinY, cosX);
					v.vertex.xy = mul(v.uv.xy, rotationMatrix);
					v.vertex.x += -0.5*sinX - 0.5*cosX + _Xoffset;
					v.vertex.y += -0.5*cosX + 0.5*sinX + _Yoffset;

					sinX = sin(PiRot);
					cosX = cos(PiRot);
					sinY = sin(PiRot);

					rotationMatrix = float2x2(cosX, -sinX, sinY, cosX);

					Billboard(v);
					v2f o;
					o.vertex = UnityObjectToClipPos(v.vertex*_Scale);
					o.uv = TRANSFORM_TEX(v.uv, _MainTex);
					v.vertex.xy = mul(v.vertex.xy, rotationMatrix);
					v.vertex.x -= _Xoffset;
					v.vertex.y -= _Yoffset;
					return o;
				}

				fixed4 frag(v2f i) : SV_Target
				{
					// sample the texture
					fixed4 col = tex2D(_MainTex, i.uv);
					col.a *= (tex2D(_AlphaTex, i.uv).r + tex2D(_AlphaTex, i.uv).g + tex2D(_AlphaTex, i.uv).b) / 3;
					//col.a = 0.5;
					return col;
				}
				ENDCG
			}
		}
	}
}
