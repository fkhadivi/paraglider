Shader "Unlit/NewUnlitShader"
{
	Properties
	{
		_MainTex ("Texture", 2D) = "white" {}
	}
	SubShader
	{
		Tags
	{
		"Queue" = "Transparent"
		"IgnoreProjector" = "True"
		"RenderType" = "Transparent"
	}
		Blend SrcAlpha OneMinusSrcAlpha
		AlphaTest Greater .01
		LOD 100

		Pass
		{
			CGPROGRAM
			#pragma vertex vert
			#pragma fragment frag

			
			#include "UnityCG.cginc"

			struct appdata
			{
				float4 vertex : POSITION;
				float2 uv : TEXCOORD0;
			};

			struct v2f
			{
				float2 uv : TEXCOORD0;

				float4 vertex : SV_POSITION;
			};

			sampler2D _MainTex;
			float4 _MainTex_ST;

			void Billboard(inout appdata v)
			{
				//const float3 local = float3(v.vertex.x, v.vertex.y, 0); // this is the quad verts as generated by MakeMesh.cs in the localPos list.
				const float3 offset = float3(0, 0, v.vertex.z);
				const float3 upVector = half3(0, 1, 0);
				const float3 forwardVector = UNITY_MATRIX_IT_MV[2].xyz; // camera forward
				const float3 rightVector = normalize(cross(forwardVector, upVector));
				float3 position = 0;
				position += v.vertex.x * rightVector;
				position += v.vertex.y * upVector;
				//position += local.z * forwardVector;
				v.vertex = float4(offset + position, 1);
				//v.normal = forwardVector;
			}
			
			v2f vert (appdata v)
			{
				Billboard(v);
				v2f o;
				o.vertex = UnityObjectToClipPos(v.vertex);
				o.uv = TRANSFORM_TEX(v.uv, _MainTex);

				return o;
			}
			
			fixed4 frag (v2f i) : SV_Target
			{
				// sample the texture
				fixed4 col = tex2D(_MainTex, i.uv);
				 //col.a = 0.5;

				return col;
			}
			ENDCG
		}
	}
}
